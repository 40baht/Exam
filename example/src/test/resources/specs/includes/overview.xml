<ignored xmlns:e="http://exam.extension.io" xmlns:cc="http://www.concordion.org/2007/concordion">
    <h2>Overview</h2>
    <p>
        Exam is oriented on <strong>declarative end-to-end black\graybox application testing</strong> in a way
        a manual tester would do it: send request, verify response\database\message queue etc.
    </p>
    <p>
        Hence the Exam functionality falls apart in <strong>different libraries (plugins)</strong> that are tailored
        for specific kinds of checks: <i>database interactions, message queue interactions,
        http interactions, file system interactions etc.</i> and may be used separately.
    </p>
    <p>
        Each library consist of <strong>plugin class</strong> that should be configured and attached to <strong>ExamExtension</strong>
        and <strong>set of commands</strong> that can be used in <i>.html</i> specification files.
    </p>
    <p>
        Exam leverages the <a href="https://concordion.org/coding/java/markdown/#creating-an-extension">Concordion Extension API</a>
        and may be enabled either in standard annotation based way:
        <pre class="doc-code language-java"><code>@RunWith(ConcordionRunner.class)
@ConcordionOptions(declareNamespaces = {"c", "http://www.concordion.org/2007/concordion", "e", ExamExtension.NS})
public class Specs {
    @Extension
    private final ExamExtension exam = new ExamExtension(
        new WsPlugin("/app", 8080),
        new DbPlugin("org.postgresql.Driver", "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres")
    );
}</code></pre>
        or by implementing <code>io.github.adven27.concordion.extensions.exam.core.AbstractSpecs</code> class that will
        do the same annotation based enabling internally but makes extension configuration points more visible and structured from the one side
        and abstracts away enabling-related boilerplate from the other:
        <pre class="doc-code language-java"><code>public class Specs extends AbstractSpecs {
    @Override
    protected ExamExtension init() {
        return new ExamExtension(
            new WsPlugin("/app", 8080),
            new DbPlugin("org.postgresql.Driver", "jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres")
        );
    }
...
}</code></pre>
    </p>
</ignored>