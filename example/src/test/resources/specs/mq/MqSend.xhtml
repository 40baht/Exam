<html xmlns:e="http://exam.extension.io" xmlns:cc="http://www.concordion.org/2007/concordion">
<body>
<h1>mq-send</h1>

<p class="lead">Sends message to specified queue</p>

<h2>Overview</h2>

<e:set var="cmd" value="e:mq-send"/>
<e:set var="cmdExample" silent="true"><![CDATA[<e:mq-send name="someQueue">
    { "some": "message"}
</e:mq-send>]]></e:set>
<e:include from="/specs/includes/mq/usage.xml"/>

<h3>Attributes</h3>
<table class="table" style="table-layout: fixed;">
    <thead><tr><th style="width: 100px;">attribute</th><th style="width: 300px;">desc</th><th>example</th></tr></thead>
    <e:include from="/specs/includes/mq/attr-name.xml"/>
    <e:include from="/specs/includes/attr-from.xml"/>
    <e:include from="/specs/includes/attr-vars.xml"/>
    <e:include from="/specs/includes/attr-varsSeparator.xml"/>
    <e:include from="/specs/includes/mq/attr-headers.xml"/>
    <tr>
        <td><code>params</code></td>
        <td>
            <span>
                Comma-separated <var>name=value</var> list of parameters to pass to the <code>MqTester.send</code> method.
                Specific implementation of the <code>MqTester</code> may use this list to fine-tune sending.
            </span>
        </td>
        <td><var>Optional</var>. <var>Default: empty</var><pre class="doc-code language-json"><code>params="param1=1, param2=2"</code></pre></td>
    </tr>
    <tr>
        <td><code>formatAs</code></td>
        <td><span>Format to use for pretty-print message in report. Supported values: <i>json</i>, <i>xml</i>.</span></td>
        <td><var>Optional</var>. <var>Default: <strong>json</strong> </var><pre class="doc-code language-json"><code>formatAs="xml"</code></pre></td>
    </tr>
    <e:include from="/specs/includes/mq/attr-collapsable.xml"/>
</table>


<h2>Examples</h2>

<e:before-each>
    <e:given><e:mq-purge name="myQueue"/></e:given>
</e:before-each>

<h3>Specifying message</h3>

<p>
    Message could be specified in the tag body:
</p>
<e:example name="Message in tag body">
    <e:when>
        <e:mq-send name="myQueue" print="true">{"date" : "{{now 'yyyy-MM-dd'}}"}</e:mq-send>
    </e:when>
    <e:then>
        <e:mq-check name="myQueue">{"date" : "{{now 'yyyy-MM-dd'}}"}</e:mq-check>
    </e:then>
</e:example>

<p>
    Or in the file:
</p>
<e:example name="Message in file">
    <e:when>
        <e:mq-send name="myQueue" from="/specs/mq/data/message.json" print="true"/>
    </e:when>
    <e:then>
        Queue has the message:
        <e:mq-check name="myQueue">{"date" : "{{now 'yyyy-MM-dd'}}"}</e:mq-check>
    </e:then>
</e:example>

<p>
    Specified message value basically is a <a href="https://github.com/jknack/handlebars.java">Handlebar template</a>
    hence <strong>context variables</strong> and <strong>handlebars helpers</strong> may be used to resolve the final message.
</p>
<p>
    The <code>vars</code> attribute could be used to conveniently provide context variables for message template.
</p>
<e:example name="Message templates">
    <e:when>
        <e:mq-send name="myQueue" from="/data/mq/msg.json"
                   vars="myVar1={{now 'yyyy-MM-dd'}} | myVar2={{date myVar1 minus='1 d'}} | myVar3=str with commas , signs"
                   varsSeparator="|" print="true"/>
    </e:when>
    <e:then>
        Queue has the message:
        <e:mq-check name="myQueue" from="/data/mq/msg.json"
                    vars="myVar1={{now 'yyyy-MM-dd'}} | myVar2={{date myVar1 minus='1 d'}} | myVar3=str with commas , signs"
                    varsSeparator="|"/>
    </e:then>
</e:example>

<h3>Specifying message headers</h3>
<p>
    The <code>headers</code> attribute could be used to pass desired message headers to the <code>MqTester</code> implementation.
    <strong>Propagating</strong> this headers to the actual message is the <strong>MqTester implementation responsibility</strong>.
</p>
<e:example name="Message headers">
    <e:when>
        <e:set var="id" value="some-id"/>
        <e:mq-send name="myQueue" headers="id={{id}}, contentEncoding=UTF-8" print="true">{}</e:mq-send>
    </e:when>
    <e:then>
        Queue has the message with headers:
        <e:mq-check name="myQueue" headers="contentEncoding=UTF-8, id={{id}}">{}</e:mq-check>
    </e:then>
</e:example>

<h3>Pretty-printing</h3>

<h2>Collapsable view</h2>

<p>
    Big messages may be collapsed in report via the <code>collapsable</code> attribute.
</p>
<e:example name="collapsable messages">
    <e:then>
        <e:mq-send name="myQueue" from="/data/mq/big.json" collapsable="true" print="true"/>
        <e:mq-check name="myQueue" from="/data/mq/big.json" collapsable="true"/>
    </e:then>
</e:example>

<h2>Highlighting</h2>

<p>
    To hint report about the message format the <code>formatAs</code> attribute can be used.
    Supported values: <var>xml</var>, <var>json</var> (default).
</p>
<e:example name="pretty print messages">
    <e:when>
        <e:mq-send name="myQueue" from="/data/mq/some.xml" formatAs="xml" print="true"/>
    </e:when>
    <e:when>
        <e:mq-send name="myQueue" from="/data/mq/some.txt" print="true"/>
    </e:when>
</e:example>

</body>
</html>